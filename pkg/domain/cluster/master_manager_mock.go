// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/cluster/node/master_manager.go

// Package node is a generated GoMock package.
package cluster

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPerceivedMasterChange is a mock of PerceivedMasterChange interface.
type MockPerceivedMasterChange struct {
	ctrl     *gomock.Controller
	recorder *MockPerceivedMasterChangeMockRecorder
}

// MockPerceivedMasterChangeMockRecorder is the mock recorder for MockPerceivedMasterChange.
type MockPerceivedMasterChangeMockRecorder struct {
	mock *MockPerceivedMasterChange
}

// NewMockPerceivedMasterChange creates a new mock instance.
func NewMockPerceivedMasterChange(ctrl *gomock.Controller) *MockPerceivedMasterChange {
	mock := &MockPerceivedMasterChange{ctrl: ctrl}
	mock.recorder = &MockPerceivedMasterChangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerceivedMasterChange) EXPECT() *MockPerceivedMasterChangeMockRecorder {
	return m.recorder
}

// BecomeMaster mocks base method.
func (m *MockPerceivedMasterChange) BecomeMaster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BecomeMaster")
}

// BecomeMaster indicates an expected call of BecomeMaster.
func (mr *MockPerceivedMasterChangeMockRecorder) BecomeMaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BecomeMaster", reflect.TypeOf((*MockPerceivedMasterChange)(nil).BecomeMaster))
}

// NoLongerMaster mocks base method.
func (m *MockPerceivedMasterChange) NoLongerMaster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NoLongerMaster")
}

// NoLongerMaster indicates an expected call of NoLongerMaster.
func (mr *MockPerceivedMasterChangeMockRecorder) NoLongerMaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoLongerMaster", reflect.TypeOf((*MockPerceivedMasterChange)(nil).NoLongerMaster))
}

// MockMasterManager is a mock of MasterManager interface.
type MockMasterManager struct {
	ctrl     *gomock.Controller
	recorder *MockMasterManagerMockRecorder
}

// MockMasterManagerMockRecorder is the mock recorder for MockMasterManager.
type MockMasterManagerMockRecorder struct {
	mock *MockMasterManager
}

// NewMockMasterManager creates a new mock instance.
func NewMockMasterManager(ctrl *gomock.Controller) *MockMasterManager {
	mock := &MockMasterManager{ctrl: ctrl}
	mock.recorder = &MockMasterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterManager) EXPECT() *MockMasterManagerMockRecorder {
	return m.recorder
}

// BecomeMaster mocks base method.
func (m *MockMasterManager) BecomeMaster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BecomeMaster")
}

// BecomeMaster indicates an expected call of BecomeMaster.
func (mr *MockMasterManagerMockRecorder) BecomeMaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BecomeMaster", reflect.TypeOf((*MockMasterManager)(nil).BecomeMaster))
}

// IsMaster mocks base method.
func (m *MockMasterManager) IsMaster() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMaster")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMaster indicates an expected call of IsMaster.
func (mr *MockMasterManagerMockRecorder) IsMaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMaster", reflect.TypeOf((*MockMasterManager)(nil).IsMaster))
}

// NoLogerMaster mocks base method.
func (m *MockMasterManager) NoLogerMaster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NoLogerMaster")
}

// NoLogerMaster indicates an expected call of NoLogerMaster.
func (mr *MockMasterManagerMockRecorder) NoLogerMaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoLogerMaster", reflect.TypeOf((*MockMasterManager)(nil).NoLogerMaster))
}

// RegisterPerceivedMasterChange mocks base method.
func (m *MockMasterManager) RegisterPerceivedMasterChange(arg0 PerceivedMasterChange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPerceivedMasterChange", arg0)
}

// RegisterPerceivedMasterChange indicates an expected call of RegisterPerceivedMasterChange.
func (mr *MockMasterManagerMockRecorder) RegisterPerceivedMasterChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPerceivedMasterChange", reflect.TypeOf((*MockMasterManager)(nil).RegisterPerceivedMasterChange), arg0)
}

// UnRegisterPerceivedMasterChange mocks base method.
func (m *MockMasterManager) UnRegisterPerceivedMasterChange(arg0 PerceivedMasterChange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegisterPerceivedMasterChange", arg0)
}

// UnRegisterPerceivedMasterChange indicates an expected call of UnRegisterPerceivedMasterChange.
func (mr *MockMasterManagerMockRecorder) UnRegisterPerceivedMasterChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterPerceivedMasterChange", reflect.TypeOf((*MockMasterManager)(nil).UnRegisterPerceivedMasterChange), arg0)
}
