// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/domain/cluster/server_request_handler.go

// Package cluster is a generated GoMock package.
package cluster

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/rootyyang/yangkv/pkg/proto"
)

// MockMasterOrDataHandleStrategy is a mock of MasterOrDataHandleStrategy interface.
type MockMasterOrDataHandleStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockMasterOrDataHandleStrategyMockRecorder
}

// MockMasterOrDataHandleStrategyMockRecorder is the mock recorder for MockMasterOrDataHandleStrategy.
type MockMasterOrDataHandleStrategyMockRecorder struct {
	mock *MockMasterOrDataHandleStrategy
}

// NewMockMasterOrDataHandleStrategy creates a new mock instance.
func NewMockMasterOrDataHandleStrategy(ctrl *gomock.Controller) *MockMasterOrDataHandleStrategy {
	mock := &MockMasterOrDataHandleStrategy{ctrl: ctrl}
	mock.recorder = &MockMasterOrDataHandleStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterOrDataHandleStrategy) EXPECT() *MockMasterOrDataHandleStrategyMockRecorder {
	return m.recorder
}

// HeartBeat mocks base method.
func (m *MockMasterOrDataHandleStrategy) HeartBeat(ctx context.Context, req *proto.HeartBeatReq) (*proto.HeartBeatResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartBeat", ctx, req)
	ret0, _ := ret[0].(*proto.HeartBeatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartBeat indicates an expected call of HeartBeat.
func (mr *MockMasterOrDataHandleStrategyMockRecorder) HeartBeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockMasterOrDataHandleStrategy)(nil).HeartBeat), ctx, req)
}

// LeaveCluster mocks base method.
func (m *MockMasterOrDataHandleStrategy) LeaveCluster(ctx context.Context, req *proto.LeaveClusterReq) (*proto.LeaveClusterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCluster", ctx, req)
	ret0, _ := ret[0].(*proto.LeaveClusterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveCluster indicates an expected call of LeaveCluster.
func (mr *MockMasterOrDataHandleStrategyMockRecorder) LeaveCluster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCluster", reflect.TypeOf((*MockMasterOrDataHandleStrategy)(nil).LeaveCluster), ctx, req)
}
