// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/domain/node/node_with_heartbeat.go

// Package node is a generated GoMock package.
package node

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/rootyyang/yangkv/pkg/proto"
)

// MockPerceivedNodeHeartBeatFail is a mock of PerceivedNodeHeartBeatFail interface.
type MockPerceivedNodeHeartBeatFail struct {
	ctrl     *gomock.Controller
	recorder *MockPerceivedNodeHeartBeatFailMockRecorder
}

// MockPerceivedNodeHeartBeatFailMockRecorder is the mock recorder for MockPerceivedNodeHeartBeatFail.
type MockPerceivedNodeHeartBeatFailMockRecorder struct {
	mock *MockPerceivedNodeHeartBeatFail
}

// NewMockPerceivedNodeHeartBeatFail creates a new mock instance.
func NewMockPerceivedNodeHeartBeatFail(ctrl *gomock.Controller) *MockPerceivedNodeHeartBeatFail {
	mock := &MockPerceivedNodeHeartBeatFail{ctrl: ctrl}
	mock.recorder = &MockPerceivedNodeHeartBeatFailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerceivedNodeHeartBeatFail) EXPECT() *MockPerceivedNodeHeartBeatFailMockRecorder {
	return m.recorder
}

// HeartBeatFail mocks base method.
func (m *MockPerceivedNodeHeartBeatFail) HeartBeatFail(node NodeInterface, failTime int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HeartBeatFail", node, failTime)
}

// HeartBeatFail indicates an expected call of HeartBeatFail.
func (mr *MockPerceivedNodeHeartBeatFailMockRecorder) HeartBeatFail(node, failTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeatFail", reflect.TypeOf((*MockPerceivedNodeHeartBeatFail)(nil).HeartBeatFail), node, failTime)
}

// MockNodeWithHeartBeat is a mock of NodeWithHeartBeat interface.
type MockNodeWithHeartBeat struct {
	ctrl     *gomock.Controller
	recorder *MockNodeWithHeartBeatMockRecorder
}

// MockNodeWithHeartBeatMockRecorder is the mock recorder for MockNodeWithHeartBeat.
type MockNodeWithHeartBeatMockRecorder struct {
	mock *MockNodeWithHeartBeat
}

// NewMockNodeWithHeartBeat creates a new mock instance.
func NewMockNodeWithHeartBeat(ctrl *gomock.Controller) *MockNodeWithHeartBeat {
	mock := &MockNodeWithHeartBeat{ctrl: ctrl}
	mock.recorder = &MockNodeWithHeartBeatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeWithHeartBeat) EXPECT() *MockNodeWithHeartBeatMockRecorder {
	return m.recorder
}

// RegisterHeartBeatFailMoreThanThree mocks base method.
func (m *MockNodeWithHeartBeat) RegisterHeartBeatFailMoreThanThree(arg0 PerceivedNodeHeartBeatFail) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHeartBeatFailMoreThanThree", arg0)
}

// RegisterHeartBeatFailMoreThanThree indicates an expected call of RegisterHeartBeatFailMoreThanThree.
func (mr *MockNodeWithHeartBeatMockRecorder) RegisterHeartBeatFailMoreThanThree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHeartBeatFailMoreThanThree", reflect.TypeOf((*MockNodeWithHeartBeat)(nil).RegisterHeartBeatFailMoreThanThree), arg0)
}

// Start mocks base method.
func (m *MockNodeWithHeartBeat) Start(localNodeMeta *proto.NodeMeta, pMasterNode NodeInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", localNodeMeta, pMasterNode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNodeWithHeartBeatMockRecorder) Start(localNodeMeta, pMasterNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNodeWithHeartBeat)(nil).Start), localNodeMeta, pMasterNode)
}

// Stop mocks base method.
func (m *MockNodeWithHeartBeat) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeWithHeartBeatMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNodeWithHeartBeat)(nil).Stop))
}

// UnRegisterHeartBeatFailMoreThanThree mocks base method.
func (m *MockNodeWithHeartBeat) UnRegisterHeartBeatFailMoreThanThree(arg0 PerceivedNodeHeartBeatFail) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegisterHeartBeatFailMoreThanThree", arg0)
}

// UnRegisterHeartBeatFailMoreThanThree indicates an expected call of UnRegisterHeartBeatFailMoreThanThree.
func (mr *MockNodeWithHeartBeatMockRecorder) UnRegisterHeartBeatFailMoreThanThree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterHeartBeatFailMoreThanThree", reflect.TypeOf((*MockNodeWithHeartBeat)(nil).UnRegisterHeartBeatFailMoreThanThree), arg0)
}

// MockNodeWithHeartBeatProvider is a mock of NodeWithHeartBeatProvider interface.
type MockNodeWithHeartBeatProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodeWithHeartBeatProviderMockRecorder
}

// MockNodeWithHeartBeatProviderMockRecorder is the mock recorder for MockNodeWithHeartBeatProvider.
type MockNodeWithHeartBeatProviderMockRecorder struct {
	mock *MockNodeWithHeartBeatProvider
}

// NewMockNodeWithHeartBeatProvider creates a new mock instance.
func NewMockNodeWithHeartBeatProvider(ctrl *gomock.Controller) *MockNodeWithHeartBeatProvider {
	mock := &MockNodeWithHeartBeatProvider{ctrl: ctrl}
	mock.recorder = &MockNodeWithHeartBeatProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeWithHeartBeatProvider) EXPECT() *MockNodeWithHeartBeatProviderMockRecorder {
	return m.recorder
}

// GetNode mocks base method.
func (m *MockNodeWithHeartBeatProvider) GetNode() NodeWithHeartBeat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode")
	ret0, _ := ret[0].(NodeWithHeartBeat)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeWithHeartBeatProviderMockRecorder) GetNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeWithHeartBeatProvider)(nil).GetNode))
}
