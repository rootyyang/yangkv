// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/domain//node/node.go

// Package node is a generated GoMock package.
package node

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "github.com/rootyyang/yangkv/pkg/infrastructure/rpc"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// GetNodeMeta mocks base method.
func (m *MockNode) GetNodeMeta() *NodeMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeMeta")
	ret0, _ := ret[0].(*NodeMeta)
	return ret0
}

// GetNodeMeta indicates an expected call of GetNodeMeta.
func (mr *MockNodeMockRecorder) GetNodeMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeMeta", reflect.TypeOf((*MockNode)(nil).GetNodeMeta))
}

// GetRPC mocks base method.
func (m *MockNode) GetRPC() rpc.RPClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPC")
	ret0, _ := ret[0].(rpc.RPClient)
	return ret0
}

// GetRPC indicates an expected call of GetRPC.
func (mr *MockNodeMockRecorder) GetRPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPC", reflect.TypeOf((*MockNode)(nil).GetRPC))
}

// Start mocks base method.
func (m *MockNode) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNodeMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode)(nil).Start))
}

// Stop mocks base method.
func (m *MockNode) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// MockNodeProvider is a mock of NodeProvider interface.
type MockNodeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodeProviderMockRecorder
}

// MockNodeProviderMockRecorder is the mock recorder for MockNodeProvider.
type MockNodeProviderMockRecorder struct {
	mock *MockNodeProvider
}

// NewMockNodeProvider creates a new mock instance.
func NewMockNodeProvider(ctrl *gomock.Controller) *MockNodeProvider {
	mock := &MockNodeProvider{ctrl: ctrl}
	mock.recorder = &MockNodeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeProvider) EXPECT() *MockNodeProviderMockRecorder {
	return m.recorder
}

// GetNode mocks base method.
func (m *MockNodeProvider) GetNode(arg0 NodeMeta) Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0)
	ret0, _ := ret[0].(Node)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeProviderMockRecorder) GetNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeProvider)(nil).GetNode), arg0)
}
