// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/infrastructure/rpc/rpc_interface.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/rootyyang/yangkv/pkg/proto"
)

// MockRPCClientProvider is a mock of RPCClientProvider interface.
type MockRPCClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientProviderMockRecorder
}

// MockRPCClientProviderMockRecorder is the mock recorder for MockRPCClientProvider.
type MockRPCClientProviderMockRecorder struct {
	mock *MockRPCClientProvider
}

// NewMockRPCClientProvider creates a new mock instance.
func NewMockRPCClientProvider(ctrl *gomock.Controller) *MockRPCClientProvider {
	mock := &MockRPCClientProvider{ctrl: ctrl}
	mock.recorder = &MockRPCClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClientProvider) EXPECT() *MockRPCClientProviderMockRecorder {
	return m.recorder
}

// GetRPCClient mocks base method.
func (m *MockRPCClientProvider) GetRPCClient(remoteNodeIP, remoteNodePort string) RPClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCClient", remoteNodeIP, remoteNodePort)
	ret0, _ := ret[0].(RPClient)
	return ret0
}

// GetRPCClient indicates an expected call of GetRPCClient.
func (mr *MockRPCClientProviderMockRecorder) GetRPCClient(remoteNodeIP, remoteNodePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCClient", reflect.TypeOf((*MockRPCClientProvider)(nil).GetRPCClient), remoteNodeIP, remoteNodePort)
}

// MockRPClientInterface is a mock of RPClientInterface interface.
type MockRPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRPClientInterfaceMockRecorder
}

// MockRPClientInterfaceMockRecorder is the mock recorder for MockRPClientInterface.
type MockRPClientInterfaceMockRecorder struct {
	mock *MockRPClientInterface
}

// NewMockRPClientInterface creates a new mock instance.
func NewMockRPClientInterface(ctrl *gomock.Controller) *MockRPClientInterface {
	mock := &MockRPClientInterface{ctrl: ctrl}
	mock.recorder = &MockRPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPClientInterface) EXPECT() *MockRPClientInterfaceMockRecorder {
	return m.recorder
}

// HeartBeat mocks base method.
func (m *MockRPClientInterface) HeartBeat(ctx context.Context, req *proto.HeartBeatReq) (*proto.HeartBeatResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartBeat", ctx, req)
	ret0, _ := ret[0].(*proto.HeartBeatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartBeat indicates an expected call of HeartBeat.
func (mr *MockRPClientInterfaceMockRecorder) HeartBeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockRPClientInterface)(nil).HeartBeat), ctx, req)
}

// LeaveCluster mocks base method.
func (m *MockRPClientInterface) LeaveCluster(ctx context.Context, req *proto.LeaveClusterReq) (*proto.LeaveClusterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCluster", ctx, req)
	ret0, _ := ret[0].(*proto.LeaveClusterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveCluster indicates an expected call of LeaveCluster.
func (mr *MockRPClientInterfaceMockRecorder) LeaveCluster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCluster", reflect.TypeOf((*MockRPClientInterface)(nil).LeaveCluster), ctx, req)
}

// Start mocks base method.
func (m *MockRPClientInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPClientInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPClientInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockRPClientInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRPClientInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPClientInterface)(nil).Stop))
}

// MockRPCSeverHandleInterface is a mock of RPCSeverHandleInterface interface.
type MockRPCSeverHandleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRPCSeverHandleInterfaceMockRecorder
}

// MockRPCSeverHandleInterfaceMockRecorder is the mock recorder for MockRPCSeverHandleInterface.
type MockRPCSeverHandleInterfaceMockRecorder struct {
	mock *MockRPCSeverHandleInterface
}

// NewMockRPCSeverHandleInterface creates a new mock instance.
func NewMockRPCSeverHandleInterface(ctrl *gomock.Controller) *MockRPCSeverHandleInterface {
	mock := &MockRPCSeverHandleInterface{ctrl: ctrl}
	mock.recorder = &MockRPCSeverHandleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCSeverHandleInterface) EXPECT() *MockRPCSeverHandleInterfaceMockRecorder {
	return m.recorder
}

// HeartBeat mocks base method.
func (m *MockRPCSeverHandleInterface) HeartBeat(ctx context.Context, req *proto.HeartBeatReq) (*proto.HeartBeatResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartBeat", ctx, req)
	ret0, _ := ret[0].(*proto.HeartBeatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartBeat indicates an expected call of HeartBeat.
func (mr *MockRPCSeverHandleInterfaceMockRecorder) HeartBeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockRPCSeverHandleInterface)(nil).HeartBeat), ctx, req)
}

// LeaveCluster mocks base method.
func (m *MockRPCSeverHandleInterface) LeaveCluster(ctx context.Context, req *proto.LeaveClusterReq) (*proto.LeaveClusterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCluster", ctx, req)
	ret0, _ := ret[0].(*proto.LeaveClusterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveCluster indicates an expected call of LeaveCluster.
func (mr *MockRPCSeverHandleInterfaceMockRecorder) LeaveCluster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCluster", reflect.TypeOf((*MockRPCSeverHandleInterface)(nil).LeaveCluster), ctx, req)
}

// Start mocks base method.
func (m *MockRPCSeverHandleInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPCSeverHandleInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPCSeverHandleInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockRPCSeverHandleInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRPCSeverHandleInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPCSeverHandleInterface)(nil).Stop))
}

// MockRPCServerInterface is a mock of RPCServerInterface interface.
type MockRPCServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerInterfaceMockRecorder
}

// MockRPCServerInterfaceMockRecorder is the mock recorder for MockRPCServerInterface.
type MockRPCServerInterfaceMockRecorder struct {
	mock *MockRPCServerInterface
}

// NewMockRPCServerInterface creates a new mock instance.
func NewMockRPCServerInterface(ctrl *gomock.Controller) *MockRPCServerInterface {
	mock := &MockRPCServerInterface{ctrl: ctrl}
	mock.recorder = &MockRPCServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCServerInterface) EXPECT() *MockRPCServerInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockRPCServerInterface) Start(pPort string, pRPCHandleFunc RPCSeverHandleInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", pPort, pRPCHandleFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPCServerInterfaceMockRecorder) Start(pPort, pRPCHandleFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPCServerInterface)(nil).Start), pPort, pRPCHandleFunc)
}

// Stop mocks base method.
func (m *MockRPCServerInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRPCServerInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPCServerInterface)(nil).Stop))
}
