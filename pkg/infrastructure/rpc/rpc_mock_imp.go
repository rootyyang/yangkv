// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/infrastructure/rpc/rpc.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRPCClientProvider is a mock of RPCClientProvider interface.
type MockRPCClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientProviderMockRecorder
}

// MockRPCClientProviderMockRecorder is the mock recorder for MockRPCClientProvider.
type MockRPCClientProviderMockRecorder struct {
	mock *MockRPCClientProvider
}

// NewMockRPCClientProvider creates a new mock instance.
func NewMockRPCClientProvider(ctrl *gomock.Controller) *MockRPCClientProvider {
	mock := &MockRPCClientProvider{ctrl: ctrl}
	mock.recorder = &MockRPCClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClientProvider) EXPECT() *MockRPCClientProviderMockRecorder {
	return m.recorder
}

// GetRPCClient mocks base method.
func (m *MockRPCClientProvider) GetRPCClient(remoteNodeIP, remoteNodePort string) RPClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCClient", remoteNodeIP, remoteNodePort)
	ret0, _ := ret[0].(RPClient)
	return ret0
}

// GetRPCClient indicates an expected call of GetRPCClient.
func (mr *MockRPCClientProviderMockRecorder) GetRPCClient(remoteNodeIP, remoteNodePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCClient", reflect.TypeOf((*MockRPCClientProvider)(nil).GetRPCClient), remoteNodeIP, remoteNodePort)
}

// MockRPCServerProvider is a mock of RPCServerProvider interface.
type MockRPCServerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerProviderMockRecorder
}

// MockRPCServerProviderMockRecorder is the mock recorder for MockRPCServerProvider.
type MockRPCServerProviderMockRecorder struct {
	mock *MockRPCServerProvider
}

// NewMockRPCServerProvider creates a new mock instance.
func NewMockRPCServerProvider(ctrl *gomock.Controller) *MockRPCServerProvider {
	mock := &MockRPCServerProvider{ctrl: ctrl}
	mock.recorder = &MockRPCServerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCServerProvider) EXPECT() *MockRPCServerProviderMockRecorder {
	return m.recorder
}

// GetRPCServer mocks base method.
func (m *MockRPCServerProvider) GetRPCServer(localNodePort string) RPCServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCServer", localNodePort)
	ret0, _ := ret[0].(RPCServer)
	return ret0
}

// GetRPCServer indicates an expected call of GetRPCServer.
func (mr *MockRPCServerProviderMockRecorder) GetRPCServer(localNodePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCServer", reflect.TypeOf((*MockRPCServerProvider)(nil).GetRPCServer), localNodePort)
}

// MockRPClient is a mock of RPClient interface.
type MockRPClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPClientMockRecorder
}

// MockRPClientMockRecorder is the mock recorder for MockRPClient.
type MockRPClientMockRecorder struct {
	mock *MockRPClient
}

// NewMockRPClient creates a new mock instance.
func NewMockRPClient(ctrl *gomock.Controller) *MockRPClient {
	mock := &MockRPClient{ctrl: ctrl}
	mock.recorder = &MockRPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPClient) EXPECT() *MockRPClientMockRecorder {
	return m.recorder
}

// AppendEntires mocks base method.
func (m *MockRPClient) AppendEntires(ctx context.Context, req *AppendEntiresReq) (*AppendEntiresResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntires", ctx, req)
	ret0, _ := ret[0].(*AppendEntiresResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntires indicates an expected call of AppendEntires.
func (mr *MockRPClientMockRecorder) AppendEntires(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntires", reflect.TypeOf((*MockRPClient)(nil).AppendEntires), ctx, req)
}

// RequestVote mocks base method.
func (m *MockRPClient) RequestVote(ctx context.Context, req *RequestVoteReq) (*RequestVoteResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVote", ctx, req)
	ret0, _ := ret[0].(*RequestVoteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockRPClientMockRecorder) RequestVote(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockRPClient)(nil).RequestVote), ctx, req)
}

// Start mocks base method.
func (m *MockRPClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockRPClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRPClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPClient)(nil).Stop))
}

// MockRPCServer is a mock of RPCServer interface.
type MockRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerMockRecorder
}

// MockRPCServerMockRecorder is the mock recorder for MockRPCServer.
type MockRPCServerMockRecorder struct {
	mock *MockRPCServer
}

// NewMockRPCServer creates a new mock instance.
func NewMockRPCServer(ctrl *gomock.Controller) *MockRPCServer {
	mock := &MockRPCServer{ctrl: ctrl}
	mock.recorder = &MockRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCServer) EXPECT() *MockRPCServerMockRecorder {
	return m.recorder
}

// RegisterRaftHandle mocks base method.
func (m *MockRPCServer) RegisterRaftHandle(pRaftHandler RaftServiceHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRaftHandle", pRaftHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRaftHandle indicates an expected call of RegisterRaftHandle.
func (mr *MockRPCServerMockRecorder) RegisterRaftHandle(pRaftHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRaftHandle", reflect.TypeOf((*MockRPCServer)(nil).RegisterRaftHandle), pRaftHandler)
}

// Start mocks base method.
func (m *MockRPCServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRPCServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRPCServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockRPCServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRPCServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRPCServer)(nil).Stop))
}
