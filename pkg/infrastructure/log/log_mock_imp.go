// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/infrastructure/log/log_interface.go

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogInterface is a mock of LogInterface interface.
type MockLogInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogInterfaceMockRecorder
}

// MockLogInterfaceMockRecorder is the mock recorder for MockLogInterface.
type MockLogInterfaceMockRecorder struct {
	mock *MockLogInterface
}

// NewMockLogInterface creates a new mock instance.
func NewMockLogInterface(ctrl *gomock.Controller) *MockLogInterface {
	mock := &MockLogInterface{ctrl: ctrl}
	mock.recorder = &MockLogInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogInterface) EXPECT() *MockLogInterfaceMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogInterface) Debugf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLogInterfaceMockRecorder) Debugf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogInterface)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogInterface) Errorf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLogInterfaceMockRecorder) Errorf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogInterface)(nil).Errorf), varargs...)
}

// SetLevel mocks base method.
func (m *MockLogInterface) SetLevel(pLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel", pLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLogInterfaceMockRecorder) SetLevel(pLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLogInterface)(nil).SetLevel), pLevel)
}

// Start mocks base method.
func (m *MockLogInterface) Start(pFileName string, pMaxSizeMB, pMaxBackupFileNum, pMaxAgeDay int, pCompress bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", pFileName, pMaxSizeMB, pMaxBackupFileNum, pMaxAgeDay, pCompress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockLogInterfaceMockRecorder) Start(pFileName, pMaxSizeMB, pMaxBackupFileNum, pMaxAgeDay, pCompress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLogInterface)(nil).Start), pFileName, pMaxSizeMB, pMaxBackupFileNum, pMaxAgeDay, pCompress)
}

// Stop mocks base method.
func (m *MockLogInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockLogInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLogInterface)(nil).Stop))
}

// Sync mocks base method.
func (m *MockLogInterface) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockLogInterfaceMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockLogInterface)(nil).Sync))
}

// Warnf mocks base method.
func (m *MockLogInterface) Warnf(template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLogInterfaceMockRecorder) Warnf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogInterface)(nil).Warnf), varargs...)
}
